baixar matplotlib... colocar no cmd do VS Code:
pip install matplotlib

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A Delegacia de Roubos e Furtos de Automóveis (DRFA) por meio do seu Delegado Titular
entrou em contato com você e solicitou que fosse realizado um levantamento acerca dos registros de
Roubos de Automóveis(roubo_veiculo) por Delegacias(cisp).
O objetivo principal é verificar a existência de valores que estejam muito acima ou muito abaixo
da média.
Prepare um relatório que fundamente a sua análise

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

print('\n---- OBTENDO DADOS ----')

endereco_dados = 'https://www.ispdados.rj.gov.br/Arquivos/BaseDPEvolucaoMensalCisp.csv'

# Criando o DataFrame ocorrencias
df_ocorrencias = pd.read_csv(endereco_dados,sep=';',encoding='iso-8859-1')
df_roubo_veiculo = df_ocorrencias[['cisp','ano','roubo_veiculo']]
df_roubo_veiculo = df_roubo_veiculo[df_roubo_veiculo['ano'].between(2003,2024)]
df_roubo_veiculo = df_roubo_veiculo.groupby(['cisp']).sum(['roubo_veiculo']).reset_index()

# Criando o array dos roubo de veiculo
array_roubo_veiculo = np.array(df_roubo_veiculo["roubo_veiculo"])

# Medidas de tendência central
    # Se a média for muito diferente da mediana, distribuição é assimétrica. Não tende a haver um padrão e pode ser que existam outliers (valores discrepantes)
    # Se a média for próxima (25%) a mediana, distribuição é simétrica tende a haver um padrão

# Obtendo a média dos roubo de veiculo
media_roubo_veiculo = np.mean(array_roubo_veiculo)

# Obtendo a mediana dos roubo de veiculo
mediana_roubo_veiculo = np.median(array_roubo_veiculo)

# Obtendo a distância entre a média e a mediana dos roubo de veiculo
distancia_roubo_veiculo = abs((media_roubo_veiculo - mediana_roubo_veiculo) / mediana_roubo_veiculo)

# Obtendo o máximo e o mínimo dos roubo de veiculo
maximo_roubo_veiculo = np.max(array_roubo_veiculo)
minimo_roubo_veiculo = np.min(array_roubo_veiculo)

# Obtendo a amplitude dos roubo de veiculo
amplitude_roubo_veiculo = maximo_roubo_veiculo - minimo_roubo_veiculo

# IQR (Intervalo interquartil)
    # q3 - q1
    # É a amplitude do intervalo dos 50% dos dados centrais
    # Ela ignora os valores extremos. Max e Min que estão fora do IQR
    # Não sofre a interferência dos valores extremos
    # quanto mais próximo de zero, mais homogêneo são os dados
    # quanto mais próximo do q3, mais heterogêneo são os dados

# Obtendo os Quartis dos roubo de veiculo - Método weibull
q1_roubo_veiculo = np.quantile(array_roubo_veiculo, 0.25, method='weibull')
q2_roubo_veiculo = np.quantile(array_roubo_veiculo, 0.50, method='weibull')
q3_roubo_veiculo = np.quantile(array_roubo_veiculo, 0.75, method='weibull')
iqr_roubo_veiculo = q3_roubo_veiculo - q1_roubo_veiculo

# Identificando os outliers superiores e inferiores dos roubo de veiculo
limite_superior_roubo_veiculo = q3_roubo_veiculo + (1.5 * iqr_roubo_veiculo)
limite_inferior_roubo_veiculo = q1_roubo_veiculo - (1.5 * iqr_roubo_veiculo)

# Filtrando o DataFrame roubo de veiculo
df_roubo_veiculo_outliers_superiores = df_roubo_veiculo[df_roubo_veiculo['roubo_veiculo'] > limite_superior_roubo_veiculo]
df_roubo_veiculo_outliers_inferiores = df_roubo_veiculo[df_roubo_veiculo['roubo_veiculo'] < limite_inferior_roubo_veiculo]

# Medidas de Dispersão
    # É uma medida para observar a dispersão dos dados
    # observa-se em relação a média
    # é a média dos quadrados das diferenças entre cada valor e a média
    # o resultado da variância é elevado ao quadrado
variancia_roubo_veiculo = np.var(array_roubo_veiculo)
distancia_var_roubo_veiculo = variancia_roubo_veiculo / (media_roubo_veiculo ** 2)
devio_padrao_roubo_veiculo = np.std(array_roubo_veiculo)
coeficiente_var_roubo_veiculo = devio_padrao_roubo_veiculo / media_roubo_veiculo

# Exibindo os dados sobre os roubo de veiculo
print("\n--------- OBTENDO INFORMAÇÕES SOBRE OS ROUBOS DE VEÍCULOS -----------")
print(f"A média dos roubos de veiculo é {media_roubo_veiculo:.0f}")
print(f"A mediana dos roubos de veiculo é {mediana_roubo_veiculo:.0f}")
print(f"A distância entre a média e a mediana é dos roubos de veiculo é {distancia_roubo_veiculo}")
print(f"O menor valor dos roubo de veiculo é {minimo_roubo_veiculo:.0f}")
print(f"O maior valor dos roubos de veiculo é {maximo_roubo_veiculo:.0f}")
print(f"A amplitude dos valores dos roubos de veiculo é {amplitude_roubo_veiculo:.0f}")
print(f"O valor do q1 - 25% dos roubos de veiculo é {q1_roubo_veiculo:.0f}")
print(f"O valor do q2 - 50% dos roubo de veiculo é {q2_roubo_veiculo:.0f}")
print(f"O valor do q3 - 75% dos roubos de veiculo é {q3_roubo_veiculo:.0f}")
print(f"O valor do iqr = q3 - q1 dos roubos de veiculo é {iqr_roubo_veiculo:.0f}")
print(f"O limite inferior dos roubos de veiculos é {limite_inferior_roubo_veiculo:.0f}")
print(f"O limite superior dos roubos de veiculos é {limite_superior_roubo_veiculo:.0f}")
print(f"O valor da variância dos roubos de veiculo é {variancia_roubo_veiculo:.0f}")
print(f"O coeficiente de variação dos roubos de veiculo é {coeficiente_var_roubo_veiculo:.2f}")
print("O desvio padrão dos roubos de veiculos é", devio_padrao_roubo_veiculo)
print("A distância da variância dos roubos de veiculos é", distancia_var_roubo_veiculo)


print('\n- Verificando a existência de outliers inferiores -')
if len(df_roubo_veiculo_outliers_inferiores) == 0:
    print("Não existem outliers inferiores")
else:
    print(df_roubo_veiculo_outliers_inferiores)
print('\n- Verificando a existência de outliers superiores -')
if len(df_roubo_veiculo_outliers_superiores) == 0:
    print("Não existem outliers superiores")
else:
    print(df_roubo_veiculo_outliers_superiores.drop(columns='ano').sort_values(by='roubo_veiculo',ascending=False))

# Visualizando os dados sobre os roubos de veiculo
print('\n- Visualizando os dados sobre os roubos de veiculo -')
plt.subplots(2,2,figsize=(16,7))
plt.suptitle('Análise dos Dados sobre os Roubos de Veículos')

# posição 01: Gráfico dos Roubos de Veículos
plt.subplot(2,2,1)
plt.title('Boxplot dos Roubos de Veículos')
plt.boxplot(array_roubo_veiculo,vert=False,showmeans=True)

# Posição 02: Histograma dos Roubos de Veículos
plt.subplot(2,2,2)
plt.title('Histograma dos Roubos de Veículos')
plt.hist(array_roubo_veiculo,bins=100,edgecolor='black')    

# Posição 03: Gráfico dos Outliers dos Roubos de Veículos
df_roubo_veiculo_outliers_superiores_order = df_roubo_veiculo_outliers_superiores.sort_values(by='roubo_veiculo',ascending=True)
plt.subplot(2,2,3)
plt.title('Gráfico dos Roubos de Veículos')
plt.barh(df_roubo_veiculo_outliers_superiores_order['cisp'].astype(str),df_roubo_veiculo_outliers_superiores_order['roubo_veiculo'])

# Posição 04: Medidas Descritivas dos Roubos de Veículos
plt.subplot(2,2,4)
plt.title('Medidas Descritivas dos Roubos de Veículos')
plt.axis('off')
plt.text(0.1,0.9,f'Média dos Roubos de Veículos: {media_roubo_veiculo:.0f}')
plt.text(0.1,0.8,f'Mediana dos Roubos de Veículos: {mediana_roubo_veiculo:.0f}')
plt.text(0.1,0.7,f'Distância entre a Média e a Mediana dos Roubos de Veículos: {distancia_roubo_veiculo}')
plt.text(0.1,0.6,f'Menor Valor dos Roubos de Veículos: {minimo_roubo_veiculo:.0f}')
plt.text(0.1,0.5,f'Maior Valor dos Roubos de Veículos: {maximo_roubo_veiculo:.0f}')
plt.text(0.1,0.4,f'O coeficiente de variação dos roubos de veiculo é {coeficiente_var_roubo_veiculo:.2f}')
plt.text(0.1,0.3,f'A distância da variância dos roubos de veiculos é, {distancia_var_roubo_veiculo:.2f}')

plt.show()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
O Secretário de Segurança Pública do Rio de Janeiro entrou em contato com você de forma
urgente, pois precisa apresentar para o Governador do Estado do Rio de Janeiro um Relatório sobre os
índices de Recuperação de Veículos (recuperacao_veiculos) por Batalhão de Polícia Militar (aisp).
O objetivo principal é verificar a existência de valores que estejam muito acima ou muito abaixo
da média.
Prepare um relatório que fundamente a sua análise

#O Secretário de Segurança Pública do Rio de Janeiro entrou em contato com você de forma
#urgente, pois precisa apresentar para o Governador do Estado do Rio de Janeiro um Relatório sobre os
#índices de Recuperação de Veículos (recuperacao_veiculos) por Batalhão de Polícia Militar (aisp).
#O objetivo principal é verificar a existência de valores que estejam muito acima ou muito abaixo
#da média.
#Prepare um relatório que fundamente a sua análise.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

endereco_dados = 'https://www.ispdados.rj.gov.br/Arquivos/BaseDPEvolucaoMensalCisp.csv'

#criando o dataframe
df_ocorrencias = pd.read_csv(endereco_dados,sep=';',encoding='iso-8859-1')
#escolher colunas que quero levar
df_ocorrencias = df_ocorrencias[['aisp','ano','recuperacao_veiculos']]
#filtrar anos de 2003 ate 2024 porque 2025 ainda não está completo
df_recuperacao = df_ocorrencias[df_ocorrencias['ano'].between(2003,2024)]
#agrupar por batalhão
df_recuperacao = df_recuperacao.groupby(['aisp']).sum(['recuperacao_veiculos']).reset_index()

#criando um array para trabalhar com o dado de interesse
array_recuperacao = np.array(df_recuperacao['recuperacao_veiculos'])

#calculando medidas de tendencia central
media_recuperacao = np.mean(array_recuperacao)
mediana_recuperacao = np.median(array_recuperacao)
max = np.max(array_recuperacao)
min = np.min(array_recuperacao)
quartil_1 = np.quantile(array_recuperacao, 0.25, method='weibull')
quartil_2 = np.quantile(array_recuperacao, 0.50, method='weibull')
quartil_3 = np.quantile(array_recuperacao, 0.75, method='weibull')
iqr = quartil_3 - quartil_1
limite_superior_recup = quartil_3 + (1.5 * iqr)
limite_inferior_recup = quartil_1 - (1.5 * iqr)

#colocando outliers em dataframes
df_recuperacao_superior = df_recuperacao[df_recuperacao['recuperacao_veiculos'] > limite_superior_recup]
df_recuperacao_inferior = df_recuperacao[df_recuperacao['recuperacao_veiculos'] < limite_inferior_recup]

# Medidas de Dispersão
variancia_rec = np.var(array_recuperacao)
distancia_var_rec = variancia_rec / (media_recuperacao ** 2)
desvio_padrao_rec = np.std(array_recuperacao)
coeficiente_var_rec = desvio_padrao_rec / media_recuperacao

# Exibindo os dados sobre os roubo de veiculo
print("\n--------- OBTENDO INFORMAÇÕES SOBRE OS ROUBOS DE VEÍCULOS -----------")
print(f'A média da recuperação de veiculo é {media_recuperacao:.0f}')
print(f"A mediana da recuperação de veiculo é {mediana_recuperacao:.0f}")
print(f"O menor valor é {min:.0f}")
print(f"O maior valor é {max:.0f}")
print(f"O valor do q1 - 25% da recuperação de veiculos é {quartil_1:.0f}")
print(f"O valor do q2 - 50% da recuperação de veiculos é {quartil_2:.0f}")
print(f"O valor do q3 - 75% da recuperação de veiculos é {quartil_3:.0f}")
print(f"O valor do iqr = q3 - q1  é {iqr:.0f}")
print(f"O limite inferior é {limite_inferior_recup:.0f}")
print(f"O limite superior é {limite_superior_recup:.0f}")
print(f"O valor da variância é {variancia_rec:.0f}")
print(f"O coeficiente de variação é {coeficiente_var_rec:.2f}")
print("O desvio padrão é", desvio_padrao_rec)
print("A distância da variância é", distancia_var_rec)

print('\n- Verificando a existência de outliers inferiores -')
if len(df_recuperacao_inferior) == 0:
    print("Não existem outliers inferiores")
else:
    print(df_recuperacao_inferior)
print('\n- Verificando a existência de outliers superiores -')
if len(df_recuperacao_superior) == 0:
    print("Não existem outliers superiores")
else:
    print(df_recuperacao_superior.drop(columns='ano').sort_values(by='recuperacao_veiculos',ascending=False))

# Visualizando os dados sobre a recuperação de veículos
print('\n- Visualizando os dados sobre a recuperação de veículos -')
plt.subplots(2,2,figsize=(16,7))
plt.suptitle('Análise dos Dados sobre a recuperação de veículos')

# posição 01: Gráfico dos Roubos de Veículos
plt.subplot(2,2,1)
plt.title('Boxplot de Recuperação de Veículos')
plt.boxplot(array_recuperacao,vert=False,showmeans=True)

# Posição 02: Histograma dos Roubos de Veículos
plt.subplot(2,2,2)
plt.title('Histograma dos Roubos de Veículos')
plt.hist(array_recuperacao,bins=100,edgecolor='black')    

# Posição 03: Gráfico dos Outliers dos Roubos de Veículos
df_recuperacao_superior = df_recuperacao_superior.sort_values(by='recuperacao_veiculos',ascending=True)
plt.subplot(2,2,3)
plt.title('Gráfico de Recuperação de Veículos')
plt.barh(df_recuperacao_superior['aisp'].astype(str),df_recuperacao_superior['recuperacao_veiculos'])

# Posição 04: Medidas Descritivas dos Roubos de Veículos
plt.subplot(2,2,4)
plt.title('Medidas Descritivas de recuperação de Veículos')
plt.axis('off')
plt.text(0.1,0.9,f'Média de recuperação de Veículos: {media_recuperacao:.0f}')
plt.text(0.1,0.8,f'Mediana de recuperação de Veículos: {mediana_recuperacao:.0f}')
plt.text(0.1,0.6,f'Menor Valor de recuperação de Veículos: {min:.0f}')
plt.text(0.1,0.5,f'Maior Valor de recuperação de Veículos: {max:.0f}')
plt.text(0.1,0.4,f'O coeficiente de variação de recuperação de Veículos é {coeficiente_var_rec:.2f}')
plt.text(0.1,0.3,f'A distância da variância de recuperação de Veículos é, {distancia_var_rec:.2f}')

plt.show()



