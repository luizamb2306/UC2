#4 - O Secretário de Segurança Pública do Rio de Janeiro, entrou em contato com você de forma urgente e te solicitou
#um auxílio, para obter algumas informações que serão apresentadas ao Governador do Estado:
#- O total e a média de roubos a pedestres no Estado do Rio de Janeiro no último semestre.
#- O total e a média da população no Estado do Rio de Janeiro.
#- O maior e o menor valor encontrado em relação aos roubos de pedestres.
#- O maior e o menor valor encontrado em relação a população.
#- O nome do município com maior e menor índice de roubos a pedestres.
#- O nome do município com maior e menor quantidade de pessoas.
#- A taxa de roubos a pedestres por município, sabendo que para se chegar a esse número, deve-se dividir a
#quantidade de roubos pela quantidade da população.
#Ele te enviou os seguintes dados:
#ocorrencias = [
#['Rio de Janeiro',6775561,35000],
#['Niteroi',515317,2500],
#['São Gonçalo',1091737,15000],
#['Duque de Caxias',924624,12000],
#['Nova Iguaçu',821128,10000],
#['Belford Roxo',513118,9000],
#['São João de Meriti',471906,8500],
#['Petrópolis',306678,1000],
#['Volta Redonda',273988,2000],
#['Campos dos Goytacazes',507548,4000],]
#E pediu para apresentar na tela o resultado das informações solicitada

#importar pacote pandas
import pandas as pd

#entrada de dados:
#colocar os dados em um dataframe

municipios = [
            ['Rio de Janeiro',6775561,35000],
            ['Niteroi',515317,2500],
            ['São Gonçalo',1091737,15000],
            ['Duque de Caxias',924624,12000],
            ['Nova Iguaçu',821128,10000],
            ['Belford Roxo',513118,9000],
            ['São João de Meriti',471906,8500], 
            ['Petrópolis',306678,1000],
            ['Volta Redonda',273988,2000],
            ['Campos dos Goytacazes',507548,4000]
]

colunas = ['municipio', 'populacao', 'roubos']

municipios_df = pd.DataFrame(municipios, columns = colunas)

#processamento dos dados
total_roubos = municipios_df['roubos'].sum()
media_roubos = municipios_df['roubos'].mean()

total_populacao = municipios_df['populacao'].sum()
media_populacao = municipios_df['populacao'].mean()

maior_roubo = municipios_df['roubos'].max()
maior_roubo_municipio = municipios_df[municipios_df['roubos'] == maior_roubo]['municipio']
menor_roubo = municipios_df['roubos'].min()
menor_roubo_municipio = municipios_df[municipios_df['roubos'] == menor_roubo]['municipio']

maior_populacao = municipios_df['populacao'].max()
maior_populacao_municipio = municipios_df[municipios_df['populacao'] == maior_populacao]['municipio']
menor_populacao = municipios_df['populacao'].min()
menor_populacao_municipio = municipios_df[municipios_df['populacao'] == menor_populacao]['municipio']

#para calcular taxa de roubo, inserir uma coluna calculada no dataframe
municipios_df['taxa_roubo'] = municipios_df['roubos']/municipios_df['populacao']*100

# Definindo a Função para Formatar
def formatar(valor):
    return "{:.2f}%".format(valor)

municipios_df['taxa_roubo_formatada'] = municipios_df['taxa_roubo'].apply(formatar)

#saida dos dados
print(f'O total de roubos é: {total_roubos:.0f} e a média é: {media_roubos:.0f} por município')

print(f'O total da população é: {total_populacao:.0f} e a média é: {media_populacao:.0f} por município')

#  usar o .values[0] para aparecer somente o valor  e não o indice no print
#O trecho .values[0] é utilizado para acessar diretamente o primeiro valor dos dados armazenados em um objeto pandas, geralmente uma série (Series) ou uma coluna de um DataFrame.
print(f' O município com maior roubo foi: {maior_roubo_municipio.values[0]}, com {maior_roubo} casos.')
print(f' O município com menor roubo foi: {menor_roubo_municipio.values[0]}, com {menor_roubo} casos.')

print(f' O município com maior população é: {maior_populacao_municipio.values[0]}, com {maior_populacao} pessoas.')
print(f' O município com menor população é: {menor_populacao_municipio.values[0]}, com {menor_populacao} pessoas.')

print(f'A taxa de roubo por município é: \n')
print(municipios_df[['municipio','taxa_roubo_formatada']])

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#A Gerente de Recursos Humanos da sua empresa te passou o seguinte arquivo de dados funcionarios.csv
#com as seguintes informações: Nome, Idade, Sexo, Salário e Tempo de Empresa.
#A partir daí, ela disse que precisa criar um processo automatizado, onde seja possível responder (somente
#responder, nada mais) às seguintes perguntas:
#1. Qual a média salarial?
#2. Qual a média de idade?
#3. Qual o maior e menor tempo de casa, bem como a diferença entre eles?
#4. Qual a média de tempo de casa?
#5. Qual o funcionário mais novo e mais velho, bem como a diferença de idade entre eles?
#6. Qual o total de funcionários?
#7. Qual o nome do funcionário com maior salário?
#8.Qual o nome do funcionário com maior tempo de casa?
#Esse processo precisa ser automatizado, pois 1 vez por semana, ela precisará apresentar essas informações
#na reunião com a diretoria


#importar bibliotecas
import pandas as pd   #responsavel pela estrutura
import numpy as np    #responsavel pela operação matemática

#importar a base de dados
endereco_dados = 'bases\\funcionarios.csv'

#criar dataframe dos funcionários lendo o arquivo em CSV
funcionarios_df = pd.read_csv(endereco_dados, sep=',', encoding='iso-8859-1')

#processamento de dados
media_salarial_1 = funcionarios_df['Salário'].mean() # media usando formula pandas
media_salarial_2 = np.mean(funcionarios_df['Salário']) # media usando formula numpy

media_idade = np.mean(funcionarios_df['Idade'])

maior_tempo_casa = np.max(funcionarios_df['Tempo'])
menor_tempo_casa = np.min(funcionarios_df['Tempo'])
dif_tempo = maior_tempo_casa - menor_tempo_casa
media_tempo = np.mean(funcionarios_df['Tempo'])

maior_idade = np.max(funcionarios_df['Idade'])
menor_idade = np.min(funcionarios_df['Idade'])
dif_idade = maior_idade - menor_idade
media_idade = np.mean(funcionarios_df['Idade'])
funcionario_mais_novo = funcionarios_df[funcionarios_df['Idade'] == menor_idade]['Nome']
funcionario_mais_velho = funcionarios_df[funcionarios_df['Idade'] == maior_idade]['Nome']

total_funcionarios = np.count_nonzero(funcionarios_df['Nome'])

maior_salario = np.max(funcionarios_df['Salário'])
funcionario_maior_salario = funcionarios_df[funcionarios_df['Salário'] == maior_salario]['Nome']

funcionario_maior_tempo = funcionarios_df[funcionarios_df['Tempo'] == maior_tempo_casa]['Nome']

#saida de dados
print(f'Qual a média salarial?: R${media_salarial_2:.1f}')
print(f'Qual a média de idade?: {media_idade:0f} anos')
print(f'Qual o maior e menor tempo de casa, bem como a diferença entre eles? \n maior tempo: {maior_tempo_casa} \n menor tempo: {menor_tempo_casa} \n diferença: {dif_tempo}')
print(f'Qual a média de tempo de casa?: {media_tempo:.0f} anos')
print(f'Qual o funcionário mais novo e mais velho, bem como a diferença de idade entre eles?: \n mais novo: {funcionario_mais_novo.values[0]} \n mais velho: {funcionario_mais_velho.values[0]}')
print(f'Qual o total de funcionários?: {total_funcionarios} funcionários')
print(f'Qual o nome do funcionário com maior salário?: {funcionario_maior_salario.values[0]}')
print(f'Qual o nome do funcionário com maior tempo de casa?: {funcionario_maior_tempo.values[0]}')









