-------------- RESOLUÇÃO LU---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
## decidi agrupar por ano ao invés de olhar o total, como o prof fez, por isso tem diferenças 


#O Ministério da Educação (MEC) por meio de seu Secretário de Educação entrou em contato com você para a realização do levantamento de algumas informações contidas na base do arquivo ENEM_2020_2023.csv, conforme segue abaixo:  
    #A média dos inscritos no exame dos últimos anos (2014 a 2023).  
    #A mediana dos inscritos no exame dos últimos anos (2014 a 2023).  
    #A distância entre a média e a mediana dos inscritos no exame dos últimos anos (2014 a 2023).  
    #O maior e o menor número dos inscritos no exame dos últimos anos (2014 a 2023), assim como a amplitude dos valores.  
    #Verifique se existem valores discrepantes (Outliers Inferiores e/ou Superiores).  
    #Sabendo que o estado do Acre possui o menor número de inscritos e o estado de São Paulo o maior número de inscritos no exame dos últimos anos, apresente o percentual de variação entre esses dois estados. 
#Após observar os dados obtidos, qual a análise você faz em relação aos inscritos nos últimos exames? Prepare um pequeno texto que fundamente a sua análise (Mapeamento de Processos e Requisitos). 

#ENTRADAS DE DADOS
# importar bibliotecas
import pandas as pd 
import numpy as np

#importar a base de dados
enem = 'C:\\Users\\36134552025.1\\UC_02\\bases\\enem_2014_2023.csv'

#transformar em um dataframe
enem_df = pd.read_csv(enem, sep=';', encoding='iso-8859-1')

# transformar as colunas de anos em linhas 

enem_df_ajustado = pd.melt(enem_df,
                     id_vars=['Estado'],         # mantém a coluna Estado
                     value_vars=[str(ano) for ano in range(2014, 2024)],  # colunas de ano
                     var_name='Ano',             # nome da nova coluna de anos
                     value_name='Valor')         # nome da nova coluna com os dados

#PROCESSAMENTO DE DADOS

#medidas resumo
media = enem_df_ajustado.groupby('Ano')['Valor'].mean()
mediana = enem_df_ajustado.groupby('Ano')['Valor'].median()
dif_media_mediana = ((mediana/media)-1)*100
maior = enem_df_ajustado.groupby('Ano')['Valor'].max()
menor = enem_df_ajustado.groupby('Ano')['Valor'].min()
amplitude = maior - menor

# calculando o quartil por ano:
# Calcula o Q1 (primeiro quartil) da coluna 'Valor' para cada grupo de ano ('Ano'),
# utilizando a função apply() em conjunto com uma função lambda.
# A função lambda é uma função anônima (sem nome) usada para aplicar np.quantile()
# a cada grupo de dados correspondente a um ano.
# Dentro da lambda, usamos np.quantile(..., method='weibull') para definir o método
# de interpolação estatística desejado (weibull é útil especialmente com amostras pequenas).
# O resultado é um DataFrame com o Q1 de cada ano.
q1 = enem_df_ajustado.groupby('Ano').apply(
    lambda grupo: np.quantile(grupo['Valor'], 0.25, method='weibull'))

q2 = enem_df_ajustado.groupby('Ano').apply(
    lambda grupo: np.quantile(grupo['Valor'], 0.50, method='weibull'))

q3 = enem_df_ajustado.groupby('Ano').apply(
    lambda grupo: np.quantile(grupo['Valor'], 0.75, method='weibull'))

iqr = q3 - q1

limite_inferior_serie = q1 - (1.5*iqr)
limite_superior_serie = q3 + (1.5*iqr)
limite_inferior_df = pd.DataFrame(limite_inferior_serie)
limite_superior_df = pd.DataFrame(limite_superior_serie)

limite_inferior_df.columns = ['limite inferior'] 
limite_superior_df.columns = ['limite superior'] 

enem_df_com_limites = pd.merge(enem_df_ajustado, limite_inferior_df, on='Ano')
enem_df_com_limites = pd.merge(enem_df_com_limites, limite_superior_df, on='Ano')

enem_df_com_limites['Outlier inferior'] = np.where(enem_df_com_limites['Valor'] < enem_df_com_limites['limite inferior'], 1, 0)
enem_df_com_limites['Outlier superior'] = np.where(enem_df_com_limites['Valor'] > enem_df_com_limites['limite superior'], 1, 0)

## terminar depois 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import pandas as pd
import numpy as np

print('---- OBTENDO DADOS ----')

# Importando a base de dados Enem.csv    
endereco_dados = 'BASES\ENEM_2014_2023.csv'

# Criando o DataFrame Enem
df_enem_geral = pd.read_csv(endereco_dados,sep=';',encoding='utf-8')
df_enem = df_enem_geral[['Estado','Total']]
df_enem_top_10 = df_enem_geral.sort_values(by='Total',ascending=False)[['Estado','Total']]

# Exibindo a base de dados Enem
print('\n---- EXIBINDO A BASE DE DADOS -----')
print(df_enem.to_string(index=False))

# Criando o array do valor total
array_enem_total = np.array(df_enem["Total"])

# Obtendo a média do valor total
media_total = np.mean(array_enem_total)

# Obtendo a mediana do valor total
mediana_total = np.median(array_enem_total)

# Obtendo a distância entre a média e a mediana do valor total
distancia_total = abs((media_total - mediana_total) / mediana_total)

# Obtendo o menor valor total
minimo_total = np.min(array_enem_total)

# Obtendo o maior valor total
maximo_total = np.max(array_enem_total)

# Obtendo a amplitude dos valores total
amplitude_total = maximo_total - minimo_total

# Obtendo o valor do 1º quartil(25%) do valor total
q1_total = np.quantile(array_enem_total,0.25,method='weibull')

# Obtendo o valor do 2º quartil(50%) do valor total
q2_total = np.quantile(array_enem_total,0.50,method='weibull')

# Obtendo o valor do 3º quartil(75%) do valor total
q3_total = np.quantile(array_enem_total,0.75,method='weibull')

# Obtendo o valor do iqr do valor total
iqr_total = q3_total - q1_total

# Obtendo o limite inferior do valor total
limite_inferior_total = q1_total - (1.5 * iqr_total)

# Obtendo o limite superior do valor total
limite_superior_total = q3_total + (1.5 * iqr_total)    

# Obtendo os outliers inferiores do valor total
df_total_outliers_inferiores = df_enem[df_enem['Total'] < limite_inferior_total]

# Obtendo os outliers superiores do valor total
df_total_outliers_superiores = df_enem[df_enem['Total'] > limite_superior_total]  

# Obtendo os dados sobre os estados com maiores e menores inscritos
estado_maior = df_enem[df_enem['Total'] == maximo_total]['Estado'].values[0]
estado_menor = df_enem[df_enem['Total'] == minimo_total]['Estado'].values[0]
percentual_total = ((maximo_total - minimo_total) / minimo_total) * 100

# Exibindo os dados sobre o valor total
print("\n-- OBTENDO AS MEDIDAS DESCRITIVAS --")
print('Medidas de Tendência Central')
print(f"A média do valor total é {media_total:.0f}")
print(f"A mediana do valor total é {mediana_total:.0f}")
print(f"A distância entre a média e a mediana do valor total é {distancia_total}")
print(f"O menor valor do valor total é {minimo_total:.0f}")
print(f"O maior valor do valor total é {maximo_total:.0f}")
print(f"A amplitude dos valores do valor total é {amplitude_total:.0f}")
print(f'O valor do 1º quartil(25%) do valor total é {q1_total:.0f}')
print(f'O valor do 2º quartil(50%) do valor total é {q2_total:.0f}')
print(f'O valor do 3º quartil(75%) do valor total é {q3_total:.0f}')
print(f'O valor do iqr do valor total é {iqr_total:.0f}')
print(f'O limite inferior do valor total é {limite_inferior_total:.0f}')
print(f'O limite superior do valor total é {limite_superior_total:.0f}')
if len(df_total_outliers_inferiores) == 0:
    print('\nNão existem outliers inferiores')
else:
    print('\n------------ Outliers Inferiores ---------------')
    print(df_total_outliers_inferiores)
if len(df_total_outliers_superiores) == 0:
    print('\nNão existem outliers superiores')
else:
    print('\n------------ Outliers Superiores ---------------')
    print(df_total_outliers_superiores)

print(f'\nO estado com a maior quantidade de inscritos na série histórica é {estado_maior}')
print(f'O estado com a menor quantidade de inscritos na série histórica é {estado_menor}')
print(f'O percentual de inscritos no estado de {estado_maior} em relação ao estado de {estado_menor} é {percentual_total:.0f}%')

# Exibindo um rankig com os estados com maior quantidade de inscritos
print('\n---- EXIBINDO UM RANKING COM OS ESTADOS COM MAIOR QUANTIDADE DE INSCRITOS -----')
print(df_enem_top_10.head(10).to_string(index=False))

print('\n---- FIM DO PROGRAMA ----')
